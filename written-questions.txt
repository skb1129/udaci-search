Written Questions

Q1. Run the web crawler using the configurations located at src/main/config/written_question_1a.json and
    src/main/config/written_question_1b.json. The only difference between these configurations is that one always uses
    the sequential crawler and the other always uses the parallel crawler. Inspect the profile output in
    profileData.txt.

    If you are using a multi-processor computer, you should notice that SequentialWebCrawler#crawl and
    ParallelWebCrawler#crawl took about the same amount of time, but PageParserImpl#parse took much longer when run with
    the ParallelWebCrawler.

    Why did the parser take more time when run with ParallelWebCrawler?

A1: The profiler records the total time spent in the method by all threads, even if the total program execution time is
    about the same. In the case of ParallelWebCrawler, the PageParserImpl#parse was invoked multiple times by multiple
    threads and its total execution time in all threads was added and returned by the Profiler.



Q2. Your manager ran your crawler on her old personal computer, using the configurations from Q1, and she notices that
    the sequential crawler actually outperforms the parallel crawler. She would like to know why.

    (a) Suggest one reason why the sequential web crawler was able to read more web pages than the parallel crawler.
        (Hint: Try setting "parallelism" to 1 in the JSON configs to simulate your manager's computer.)

    (b) Suggest one scenario in which the parallel web crawler will almost certainly perform better than the sequential
        crawler. Why will it perform better?

A1: As the computer is really old, it may not have enough processor cores for the parallel crawler. The multiple threads
    in the parallel crawler now have to wait for the single processor core to be free so that it can be used by the next
    thread. This will not be the case for sequential crawler as it will process all information in a single thread.

    The parallel web crawler will outperform sequential when it is run on a multi-processor computer with a
    configuration that requires crawling a significantly large amount of webpages.



Q3. Analyze your method profiler through the lens of Aspect Oriented Programming, by answering the following questions:

    (a) What cross-cutting concern is being addressed by the com.udacity.webcrawler.profiler.Profiler class?

    (b) What are the join points of the Profiler in the web crawler program?

A1: The cross-cutting concern is method performance profiling.

    The join points are method invocations.



Q4. Identify three (3) different design patterns used in this project, and explain which interfaces, classes, and/or
    libraries use or implement those design patterns.

    For each pattern, name one thing about the pattern that you LIKED, and one thing you DISLIKED. If you did not like
    anything, you can name two things you disliked.

A4: Singleton Pattern -
    USE: It is being used by "WebCrawlerModule" and "ProfilerModule".
    LIKE: Saves memory because object is not created at each request. Only single instance is reused again and again.
    DISLIKE: They make unit testing harder as you cannot isolate a global instance.

    Builder Pattern -
    USE: It is being used by "CrawlerConfiguration" and "CrawlResult".
    LIKE: Provides better control over the construction process.
    DISLIKE: It creates more code to be written.

    Abstract Factory Pattern -
    USE: It is being used by "Profiler", "WebCrawler", "PageParser" and "PageParserFactory"
    LIKE: Promotes consistency among objects.
    DISLIKE: A change in abstract class would require a change in all subclasses.
